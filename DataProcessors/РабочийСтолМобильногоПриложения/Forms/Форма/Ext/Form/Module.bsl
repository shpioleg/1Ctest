&НаКлиенте
Перем ИмяСервиса;


&НаКлиенте
Процедура ПолучитьДоступныеСервисы(Команда)
	ПараметрыВыбора = Новый Структура("РежимВыбора",Истина);
	ОткрытьФорму("Справочник.НастройкиПодключенияКСерверу.ФормаВыбора",ПараметрыВыбора,ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Асинх Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	Если ИсточникВыбора.ИмяФормы = "Справочник.НастройкиПодключенияКСерверу.Форма.ФормаВыбора" Тогда
		Если ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
			Пароль = "";
			ВведенныйПароль = Ждать ВвестиСтрокуАсинх(Пароль,"Введите пароль.",20);
			Если НЕ ЗначениеЗаполнено(ВведенныйПароль) Тогда
				Сообщить ("Без пароля подключение к сервисам невозможно.");
				Возврат;
			КонецЕсли;
			ПолучитьДоступныеСервисыНаСервере(ВыбранноеЗначение,ВведенныйПароль);
		КонецЕсли;
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Справочник.ПодключенныеСервисы.Форма.ФормаВыбора" И ИмяСервиса = "ПолучитьДокументы" Тогда
		Если ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
			ЗапроситьНовыеДокументыНаСервере(ВыбранноеЗначение);
		КонецЕсли;
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Справочник.ПодключенныеСервисы.Форма.ФормаВыбора" И ИмяСервиса = "ЗагрузитьПодобранныеМарки" Тогда
		Если ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
			ПередатьМаркиНаСервере(ВыбранноеЗначение);
		КонецЕсли;				
	КонецЕсли;
КонецПроцедуры


&НаСервере
Процедура ПолучитьДоступныеСервисыНаСервере(НастройкаПодключения,Пароль)
	Если НЕ ЗначениеЗаполнено(НастройкаПодключения.АдресСервера) Тогда
		Сообщить("Заполните адрес сервера!");
		Возврат;
	КонецЕсли;
	ПутьКСервису = НастройкаПодключения.ПутьКСервисуРегистрации + Пароль;
	HTTPОтвет = СервисыHTTPСервер.ОтправитьЗапросКСервисуСервера(НастройкаПодключения,ПутьКСервису);
	Если HTTPОтвет = Неопределено Тогда
		Сообщить ("Не удалось установить соединение с сервером.");
		Возврат;
	КонецЕсли;
	Если НЕ HTTPОтвет.КодСостояния = 200 Тогда
		Сообщить("HTTP сервис возвратил ошибку.");
		Возврат;
	КонецЕсли;	
	ТекстОтвета = HTTPОтвет.ПолучитьТелоКакСтроку();
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(ТекстОтвета);
	Данные = ПрочитатьJSON(ЧтениеJSON);
	Если ТипЗнч(Данные) = Тип("Структура") Тогда
		ИДМУ = "";
		Если НЕ Данные.НастройкиСервера.Свойство("ИдентификаторМобильногоУстройства",ИДМУ) ИЛИ ПустаяСтрока(ИДМУ) Тогда
			Сообщить ("По данному паролю нет подключаемых сервисов.");
			Возврат;
		КонецЕсли;
		ПодключенныйСервис =ОбщегоНазначения.НайтиПодключенныйСервисПоИДМУ(ИДМУ);
		Если НЕ ЗначениеЗаполнено(ПодключенныйСервис) Тогда
			обПодключенныйСервис = Справочники.ПодключенныеСервисы.СоздатьЭлемент();
		Иначе
			обПодключенныйСервис = ПодключенныйСервис.ПолучитьОбъект();
		КонецЕсли;
		обПодключенныйСервис.Наименование = Данные.ДанныеСервисов.Наименование;
		обПодключенныйСервис.ИдентификаторМобильногоУстройства = ИДМУ;
		обПодключенныйСервис.ОбменВключен = Истина;
		Если НЕ ЗначениеЗаполнено(обПодключенныйСервис.НастройкаПодключенияКСерверу) Тогда
			обНастройкаПодключенияКСерверу = Справочники.НастройкиПодключенияКСерверу.СоздатьЭлемент();
		Иначе	
			обНастройкаПодключенияКСерверу = обПодключенныйСервис.НастройкаПодключенияКСерверу.ПолучитьОбъект();	
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(обНастройкаПодключенияКСерверу, Данные.НастройкиСервера);
		обНастройкаПодключенияКСерверу.Записать();
		обПодключенныйСервис.НастройкаПодключенияКСерверу = обНастройкаПодключенияКСерверу.Ссылка;
		обПодключенныйСервис.СервисыСервера.Очистить();
		Для каждого эл из Данные.ДанныеСервисов.Сервисы Цикл
			нс = обПодключенныйСервис.СервисыСервера.Добавить();
			ЗаполнитьЗначенияСвойств(нс, эл);
		КонецЦикла;
		обПодключенныйСервис.Записать();			
	КонецЕсли;
		
	Сообщить (HTTPОтвет.ПолучитьТелоКакСтроку());
	ЧтениеJSON.Закрыть();
КонецПроцедуры

&НаКлиенте
Процедура ЗапроситьНовыеДокументы(Команда)
	ИмяСервиса = "ПолучитьДокументы"; 
	ПодключенныйСервис = ОбщегоНазначения.ПолучитьПодключенныйСервисПоУмолчанию();
	Если НЕ ЗначениеЗаполнено(ПодключенныйСервис) Тогда
		ПараметрыВыбораПодключенногоСервиса = Новый Структура("РежимВыбора",Истина);
		ПараметрыВыбораПодключенногоСервиса.Вставить("Отбор",Новый Структура("ОбменВключен",Истина));
		ОткрытьФорму("Справочник.ПодключенныеСервисы.ФормаВыбора",ПараметрыВыбораПодключенногоСервиса,ЭтаФорма);
	Иначе
		ЗапроситьНовыеДокументыНаСервере(ПодключенныйСервис);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗапроситьНовыеДокументыНаСервере(ПодключенныйСервис)
	СервисыHTTPСервер.ВыполнитьЗапросКСервисуСервера(ПодключенныйСервис,"ПолучитьДокументы");
	
//	Если НЕ ЗначениеЗаполнено(ПодключенныйСервис.НастройкаПодключенияКСерверу) Тогда
//		Сообщить ("Настройки подключения к серверу не заполнены.");
//		Возврат;
//	КонецЕсли;	
//	НайденныеСтроки = ПодключенныйСервис.СервисыСервера.НайтиСтроки(Новый Структура("ИмяСервиса","ПолучитьДокументы"));
//	Если НЕ НайденныеСтроки.Количество() Тогда
//		Сообщить ("Сервис получения документов недоступен.");
//		Возврат;			
//	КонецЕсли;
//	ПутьКСервису = НайденныеСтроки[0].ПутьКСервису;
//	ПутьКСервису = СтрЗаменить(ПутьКСервису,"{deviceid}",ПодключенныйСервис.ИдентификаторМобильногоУстройства);
//	HTTPОтвет = ПодключитьсяКСервисуСервера (ПодключенныйСервис.НастройкаПодключенияКСерверу,ПутьКСервису);	
//		Если HTTPОтвет = Неопределено Тогда
//		Возврат;
//	КонецЕсли;
//	Если НЕ HTTPОтвет.КодСостояния = 200 Тогда
//		ПричинаОшибки = HTTPОтвет.ПолучитьТелоКакСтроку();
//		Сообщить("" + ПричинаОшибки + Символы.ПС + "HTTP сервис возвратил ошибку.");
//		Возврат;
//	КонецЕсли;
//	ТекстОтвета = HTTPОтвет.ПолучитьТелоКакСтроку();
//	ЧтениеJSON = Новый ЧтениеJSON;
//	ЧтениеJSON.УстановитьСтроку(ТекстОтвета);
//	Данные = ПрочитатьJSON(ЧтениеJSON);
//	Если ТипЗнч(Данные) = Тип("Структура") Тогда
//		Если Данные.Свойство("Документы") Тогда
//			Для каждого ДокРеализация из Данные.Документы Цикл
//				ЗаказНаПодборМарокСсылка = Документы.ЗаказНаПодборМарок.ПолучитьСсылку(Новый УникальныйИдентификатор(ДокРеализация.ДокументСсылка));
//				ЗаказНаПодборМарокОбъект = ЗаказНаПодборМарокСсылка.ПолучитьОбъект();
//				Если ЗаказНаПодборМарокОбъект = Неопределено Тогда
//					ЗаказНаПодборМарокОбъект = Документы.ЗаказНаПодборМарок.СоздатьДокумент();
//					ЗаказНаПодборМарокОбъект.УстановитьСсылкуНового(ЗаказНаПодборМарокСсылка);
//				Иначе
//					Если ЗаказНаПодборМарокОбъект.НеОбновлятьССервера Тогда
//						Продолжить;
//					КонецЕсли;
//				КонецЕсли;
//				ЗаказНаПодборМарокОбъект.Товары.Очистить();
//				ЗаказНаПодборМарокОбъект.ПодобранныеМарки.Очистить();
//				ЗаказНаПодборМарокОбъект.Номер = ДокРеализация.Номер;
//				ЗаказНаПодборМарокОбъект.Дата = XMLЗначение(Тип("Дата"),ДокРеализация.Дата);
//				ЗаказНаПодборМарокОбъект.НеОбновлятьССервера = Истина;
//				Для каждого Товар из ДокРеализация.Товары Цикл
//					нс = ЗаказНаПодборМарокОбъект.Товары.Добавить();
////					нс.НомерСтроки = Товар.НомерСтроки;
//					нс.Количество = Товар.Количество;
//					ЗаменитьУИДНаСсылки (Товар,"НоменклатураСсылка,ХарактеристикаСсылка");
//					нс.Номенклатура = Товар.НоменклатураСсылка;
//					нс.Характеристика = Товар.ХарактеристикаСсылка;
//				КонецЦикла;
//				ЗаказНаПодборМарокОбъект.Записать();
//			КонецЦикла;
//		КонецЕсли;
//		Если Данные.Свойство("Штрихкоды") Тогда
//			Для каждого Штрихкод из Данные.Штрихкоды Цикл
//				НоменклатураСсылка = Справочники.Номенклатура.ПолучитьСсылку(Новый УникальныйИдентификатор(Штрихкод.НоменклатураСсылка));
//				ХарактеристикаСсылка = Справочники.ХарактеристикиНоменклатуры.ПолучитьСсылку(Новый УникальныйИдентификатор(Штрихкод.ХарактеристикаСсылка));
//				МенеджерЗаписи = РегистрыСведений.ШтрихкодыНоменклатуры.СоздатьМенеджерЗаписи();
//				МенеджерЗаписи.Штрихкод = Штрихкод.Штрихкод;
//				МенеджерЗаписи.Номенклатура = НоменклатураСсылка;
//				МенеджерЗаписи.Характеристика = ХарактеристикаСсылка;
//				МенеджерЗаписи.Записать();			
//			КонецЦикла;
//		КонецЕсли;
//	КонецЕсли;
//	ЧтениеJSON.Закрыть();	
КонецПроцедуры

&НаКлиенте
Процедура ПередатьМарки(Команда)
	ИмяСервиса = "ЗагрузитьПодобранныеМарки";
	ПодключенныйСервис = ОбщегоНазначения.ПолучитьПодключенныйСервисПоУмолчанию();
	Если НЕ ЗначениеЗаполнено(ПодключенныйСервис) Тогда
		ПараметрыВыбораПодключенногоСервиса = Новый Структура("РежимВыбора",Истина);
		ПараметрыВыбораПодключенногоСервиса.Вставить("Отбор",Новый Структура("ОбменВключен",Истина));
		ОткрытьФорму("Справочник.ПодключенныеСервисы.ФормаВыбора",ПараметрыВыбораПодключенногоСервиса,ЭтаФорма);
	Иначе
		ПередатьМаркиНаСервере(ПодключенныйСервис);
	КонецЕсли;
	
КонецПроцедуры



&НаСервере
Процедура ПередатьМаркиНаСервере(ПодключенныйСервис)
	
	СервисыHTTPСервер.ВыполнитьЗапросКСервисуСервера(ПодключенныйСервис,"ЗагрузитьПодобранныеМарки");
	
//	ТекстHTTPЗапроса = ОбщегоНазначения.ПолучитьПодобранныеМаркиВФорматеJSON();
//	Если НЕ ЗначениеЗаполнено(ПодключенныйСервис.НастройкаПодключенияКСерверу) Тогда
//		Сообщить ("Настройки подключения к серверу не заполнены.");
//		Возврат;
//	КонецЕсли;	
//	НайденныеСтроки = ПодключенныйСервис.СервисыСервера.НайтиСтроки(Новый Структура("ИмяСервиса","ЗагрузитьПодобранныеМарки"));
//	Если НЕ НайденныеСтроки.Количество() Тогда
//		Сообщить ("Сервис передачи марок недоступен.");
//		Возврат;			
//	КонецЕсли;
//	ПутьКСервису = НайденныеСтроки[0].ПутьКСервису;
//	ПутьКСервису = СтрЗаменить(ПутьКСервису,"{deviceid}",ПодключенныйСервис.ИдентификаторМобильногоУстройства);
//	HTTPОтвет = ПодключитьсяКСервисуСервера (ПодключенныйСервис.НастройкаПодключенияКСерверу,ПутьКСервису,ТекстHTTPЗапроса);	
//	Если HTTPОтвет = Неопределено Тогда
//		Возврат;
//	КонецЕсли;
//	Если НЕ HTTPОтвет.КодСостояния = 200 Тогда
//		ТекстОтвета = HTTPОтвет.ПолучитьТелоКакСтроку();
//		Сообщить("HTTP сервис возвратил ошибку." + Символы.ПС +
//		ТекстОтвета);
//		Возврат;
//	КонецЕсли;
//	
КонецПроцедуры
