
&НаКлиенте
Процедура ВыгрузитьДокументНаСервер(Команда)
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Сообщить ("Сначала нужно записать документ.");
		Возврат;
	КонецЕсли;
	ПодключенныйСервис = ОбщегоНазначения.ПолучитьПодключенныйСервисПоУмолчанию();
	Если НЕ ЗначениеЗаполнено(ПодключенныйСервис) Тогда
		ПараметрыВыбораПодключенногоСервиса = Новый Структура("РежимВыбора",Истина);
		ПараметрыВыбораПодключенногоСервиса.Вставить("Отбор",Новый Структура("ОбменВключен",Истина));
		ОткрытьФорму("Справочник.ПодключенныеСервисы.ФормаВыбора",ПараметрыВыбораПодключенногоСервиса,ЭтаФорма);
	Иначе
		ВыгрузитьДокументНаСерверНаСервере(ПодключенныйСервис);
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура ВыгрузитьДокументНаСерверНаСервере(ПодключенныйСервис)
	СервисыHTTPСервер.ВыполнитьЗапросКСервисуСервера(ПодключенныйСервис,"ЗагрузитьПодобранныеМарки",Объект.Ссылка);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	Если ИсточникВыбора.ИмяФормы = "Справочник.ПодключенныеСервисы.Форма.ФормаВыбора" Тогда
		Если ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
			ВыгрузитьДокументНаСерверНаСервере(ВыбранноеЗначение);
		КонецЕсли;				
	КонецЕсли;
КонецПроцедуры


&НаКлиенте
Функция  ПроверитьРазрешениеНаДобавлениеМарки();
	ТекущиеДанныеТовары = Элементы.Товары.ТекущиеДанные;
	Если ТекущиеДанныеТовары = Неопределено ИЛИ ТекущиеДанныеТовары.Количество <= ТекущиеДанныеТовары.КоличествоПодобрано Тогда
		Сообщить ("Нельзя вводить количество подобранных марок более их планируемого количества.");
		Возврат Ложь;
	КонецЕсли;
	Возврат Истина;
КонецФункции

&НаКлиенте
Процедура ЭмуляцияСканирования(Команда)

	Если НЕ ПроверитьРазрешениеНаДобавлениеМарки () Тогда
		Возврат;
	КонецЕсли;
	Если НЕ ЕстьНачалоСканирования Тогда
		ЕстьНачалоСканирования = Истина;
		Элементы.ТоварыГруппаОбщая.Доступность = Ложь;
		Элементы.ТоварыЗафиксироватьРезультат.Доступность = Истина;
	КонецЕсли;
	ТекущиеДанныеСтрокиТовары = Элементы.Товары.ТекущиеДанные;
	ТестовыйГТИН = "02900000000001";
	ТестовыйСН = "ababababababa";
	нс = Объект.ПодобранныеМарки.Добавить();
	нс.КлючСтроки = ТекущиеДанныеСтрокиТовары.КлючСтроки;
	нс.GTIN = ТестовыйГТИН;
	нс.СерийныйНомер = ТестовыйСН;
	ТекущиеДанныеСтрокиТовары.КоличествоПодобрано = ТекущиеДанныеСтрокиТовары.КоличествоПодобрано + 1;
КонецПроцедуры

&НаКлиенте
Процедура Сканировать(Команда)
	Если НЕ ПроверитьРазрешениеНаДобавлениеМарки () Тогда
		Возврат;
	КонецЕсли;
	Если НЕ ЕстьНачалоСканирования Тогда
		ЕстьНачалоСканирования = Истина;
		Элементы.ТоварыГруппаОбщая.Доступность = Ложь;
		Элементы.ТоварыЗафиксироватьРезультат.Доступность = Истина;
	КонецЕсли;	

	#Если МобильноеПриложениеКлиент  Тогда
		 Если НЕ СредстваМультимедиа.ПоддерживаетсяСканированиеШтрихКодов() Тогда
    		ВызватьИсключение НСтр("ru='Сканирование штрихкодов не поддерживается';en='Barcode scanning is not supported'");
			Возврат;
  		КонецЕсли;
		ОбработчикСканирования = Новый ОписаниеОповещения("ОбработкаСканирования", ЭтаФорма);
  		ОбработчикЗакрытия = Новый ОписаниеОповещения("ОбработкаЗакрытияИнтерфейса", ЭтаФорма);
  		СредстваМультимедиа.ПоказатьСканированиеШтрихКодов(НСтр("ru='Наведите камеру на штрихкод';en='Aim the camera at an barcode'"), ОбработчикСканирования, ОбработчикЗакрытия, ТипШтрихКода.Двухмерный);
		
	#конецесли
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаСканирования(Штрихкод, Результат, Сообщение, ДополнительныеПараметры) Экспорт
	
	пТовар    = "";
	ГТИН = "";
	СН = "";
	#Если МобильноеПриложениеКлиент  Тогда
		СредстваМультимедиа.ЗакрытьСканированиеШтрихКодов();
	#конецесли
	Если Результат Тогда
		Штрихкод = СтрЗаменить(Штрихкод,Символ(0029),"");
//		Сообщить ("Штрихкод:" + Штрихкод);
//		Сообщить ("Лев1 Штрихкод:" + КодСимвола(Лев (Штрихкод,1)));
		Если Лев (Штрихкод,3) = "010" Тогда
			ГТИН = Сред (Штрихкод,3,14);	
		КонецЕсли;
		Если Сред (Штрихкод,17,2) = "21" Тогда
			СН = Сред (Штрихкод,19,13);	
		КонецЕсли;
		Если ЗначениеЗаполнено(ГТИН) И ЗначениеЗаполнено(СН) Тогда
			ТекущиеДанныеТовары = Элементы.Товары.ТекущиеДанные;	
			Если НЕ ТекущиеДанныеТовары = Неопределено Тогда
				НайденныеСтроки = Объект.ПодобранныеМарки.НайтиСтроки(Новый Структура ("GTIN,СерийныйНомер",ГТИН,СН));
				Если НайденныеСтроки.Количество() Тогда
					Сообщить ("Такая марка уже была добавлена ранее.");
					Возврат;	
				КонецЕсли;
				нс = Объект.ПодобранныеМарки.Добавить();
				нс.КлючСтроки = ТекущиеДанныеТовары.КлючСтроки;
				нс.GTIN = ГТИН;
				нс.СерийныйНомер = СН;
				ТекущиеДанныеТовары.КоличествоПодобрано = ТекущиеДанныеТовары.КоличествоПодобрано + 1;
				Сообщить ("Марка (01)" + ГТИН + "(21)" + СН + " добавлена");
				//СообщениеДляПользователя = Новый СообщениеПользователю;
				//СообщениеДляПользователя.Текст = "Марка (01)" + ГТИН + "(21)" + СН + " добавлена";
				//СообщениеДляПользователя.Поле = "Объект.ПодобранныеМарки[0].СерийныйНомер";
				//СообщениеДляПользователя.Сообщить();
			КонецЕсли;			
		КонецЕсли;
					
		
//		Сообщить ("" + КодСимвола(Штрихкод, 1) + " " + "Штрихкод:" + Штрихкод);
//		Структура = ОбщегоНазначенияСервер.ПоискПоШтрихкодуОбъекта(ШтрихКод);			     			
//		Если Структура = Неопределено Тогда
//			пТовар = Неопределено;

			Если НЕ (ЗначениеЗаполнено(ГТИН) И ЗначениеЗаполнено(СН)) Тогда
				Сообщить ("Неверный штрих код.");	
			КонецЕсли;
//			Сообщение = "Не найден объект по штрихкоду " + Штрихкод;
//		Иначе
//			пТовар    = Структура.Наименование;
//			
//			Сообщение = сокрЛП(пТовар) + Символы.ПС + Штрихкод;
//						
//			ДобавитьТоварВТаблицу(пТовар);
//			
//		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаЗакрытияИнтерфейса(ДополнительныеПараметры) Экспорт
	
	//Если ЗначениеЗаполнено(пТовар) Тогда
	//	можем встроить код открытия формы ввода количества
	//КонецЕсли;	

КонецПроцедуры 

&НаКлиенте
Процедура ТоварыПриАктивизацииСтроки(Элемент)
	ДанныеТекущейСтроки = Элемент.ТекущиеДанные;
	Если НЕ ДанныеТекущейСтроки = Неопределено Тогда
		Если ЗначениеЗаполнено(ДанныеТекущейСтроки.КлючСтроки) Тогда
			СодержаниеСканируемойСтроки = ДанныеТекущейСтроки.Номенклатура;
			Элементы.ПодобранныеМарки.ОтборСтрок = Новый ФиксированнаяСтруктура("КлючСтроки",ДанныеТекущейСтроки.КлючСтроки);
		Иначе
			СодержаниеСканируемойСтроки = "";
			Элементы.ПодобранныеМарки.ОтборСтрок = Неопределено;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура ЗафиксироватьРезультат(Команда)
	ЕстьНачалоСканирования = Ложь;
	Элементы.ТоварыГруппаОбщая.Доступность = Истина;
	Элементы.ТоварыЗафиксироватьРезультат.Доступность = Ложь;
	Записать();
КонецПроцедуры

&НаКлиенте
Процедура ПодобранныеМаркиПередУдалением(Элемент, Отказ)
	ДанныеТекущейСтроки = Элемент.ТекущиеДанные;
	Если ЗначениеЗаполнено(ДанныеТекущейСтроки.КлючСтроки) Тогда
		МассивНайденныхСтрок = Объект.Товары.НайтиСтроки(Новый Структура("КлючСтроки",ДанныеТекущейСтроки.КлючСтроки));	
		Если МассивНайденныхСтрок.Количество() Тогда
			НайденнаяПоКлючуСтрока = МассивНайденныхСтрок[0];
			Если НайденнаяПоКлючуСтрока.КоличествоПодобрано > 0 Тогда 
				НайденнаяПоКлючуСтрока.КоличествоПодобрано = НайденнаяПоКлючуСтрока.КоличествоПодобрано - 1;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПодобранныеМаркиПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	Если ОтменаРедактирования И НоваяСтрока Тогда
		Объект.ПодобранныеМарки.Удалить(Элемент.ТекущиеДанные);
		Возврат;
	КонецЕсли;
	ТекущиеДанныеТовары = Элементы.Товары.ТекущиеДанные;
	Если НоваяСтрока Тогда	
		Если НЕ ТекущиеДанныеТовары = Неопределено Тогда
			Элемент.ТекущиеДанные.КлючСтроки = ТекущиеДанныеТовары.КлючСтроки;
			ТекущиеДанныеТовары.КоличествоПодобрано = ТекущиеДанныеТовары.КоличествоПодобрано + 1;		
		Иначе
			Объект.ПодобранныеМарки.Удалить(Элемент.ТекущиеДанные);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПодобранныеМаркиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = НЕ ПроверитьРазрешениеНаДобавлениеМарки ();
КонецПроцедуры


&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

КонецПроцедуры


&НаКлиенте
Процедура ПриОткрытии(Отказ)
	Элементы.ТоварыЗафиксироватьРезультат.Доступность = Ложь;
КонецПроцедуры


&НаСервере
Процедура ОбновитьДокументССервераНаСервере()
	// Вставить содержимое обработчика.
КонецПроцедуры


&НаКлиенте
Процедура ОбновитьДокументССервера(Команда)
	ОбновитьДокументССервераНаСервере();
КонецПроцедуры

